// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Army.proto

#include "Army.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Army_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Army_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Unit;
}  // namespace protobuf_Army_2eproto
namespace protobuf_warhammer40kUnit_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_warhammer40kUnit_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Warhamer40kTransport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_warhammer40kUnit_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Warhammer40kUnit;
}  // namespace protobuf_warhammer40kUnit_2eproto
class ArmyDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArmyDescription>
      _instance;
} _ArmyDescription_default_instance_;
class UnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unit>
      _instance;
} _Unit_default_instance_;
namespace protobuf_Army_2eproto {
static void InitDefaultsArmyDescription() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArmyDescription_default_instance_;
    new (ptr) ::ArmyDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArmyDescription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ArmyDescription =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArmyDescription}, {
      &protobuf_Army_2eproto::scc_info_Unit.base,}};

static void InitDefaultsUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Unit_default_instance_;
    new (ptr) ::Unit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Unit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Unit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUnit}, {
      &protobuf_warhammer40kUnit_2eproto::scc_info_Warhammer40kUnit.base,
      &protobuf_warhammer40kUnit_2eproto::scc_info_Warhamer40kTransport.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ArmyDescription.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unit.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmyDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmyDescription, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ArmyDescription, units_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, num_figures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, warhammer40k_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, warhammer40k_transport_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ArmyDescription)},
  { 7, -1, sizeof(::Unit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ArmyDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Unit_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Army.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nArmy.proto\032\026warhammer40kUnit.proto\"5\n\017"
      "ArmyDescription\022\014\n\004cost\030\001 \001(\r\022\024\n\005units\030\002"
      " \003(\0132\005.Unit\"\261\001\n\004Unit\022\014\n\004name\030\001 \001(\t\022\014\n\004co"
      "st\030\002 \001(\r\022\023\n\013num_figures\030\003 \001(\r\022\023\n\013descrip"
      "tion\030\004 \001(\t\022,\n\021warhammer40k_unit\030\005 \001(\0132\021."
      "Warhammer40kUnit\0225\n\026warhammer40k_transpo"
      "rt\030\006 \001(\0132\025.Warhamer40kTransportb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Army.proto", &protobuf_RegisterTypes);
  ::protobuf_warhammer40kUnit_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Army_2eproto

// ===================================================================

void ArmyDescription::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmyDescription::kCostFieldNumber;
const int ArmyDescription::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmyDescription::ArmyDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Army_2eproto::scc_info_ArmyDescription.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ArmyDescription)
}
ArmyDescription::ArmyDescription(const ArmyDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      units_(from.units_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:ArmyDescription)
}

void ArmyDescription::SharedCtor() {
  cost_ = 0u;
}

ArmyDescription::~ArmyDescription() {
  // @@protoc_insertion_point(destructor:ArmyDescription)
  SharedDtor();
}

void ArmyDescription::SharedDtor() {
}

void ArmyDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArmyDescription::descriptor() {
  ::protobuf_Army_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Army_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArmyDescription& ArmyDescription::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Army_2eproto::scc_info_ArmyDescription.base);
  return *internal_default_instance();
}


void ArmyDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmyDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cost_ = 0u;
  _internal_metadata_.Clear();
}

bool ArmyDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ArmyDescription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cost = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Unit units = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ArmyDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ArmyDescription)
  return false;
#undef DO_
}

void ArmyDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ArmyDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost = 1;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // repeated .Unit units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->units(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ArmyDescription)
}

::google::protobuf::uint8* ArmyDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ArmyDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cost = 1;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // repeated .Unit units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->units(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmyDescription)
  return target;
}

size_t ArmyDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmyDescription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Unit units = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->units_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->units(static_cast<int>(i)));
    }
  }

  // uint32 cost = 1;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmyDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArmyDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmyDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArmyDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArmyDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArmyDescription)
    MergeFrom(*source);
  }
}

void ArmyDescription::MergeFrom(const ArmyDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmyDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
}

void ArmyDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArmyDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmyDescription::CopyFrom(const ArmyDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmyDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmyDescription::IsInitialized() const {
  return true;
}

void ArmyDescription::Swap(ArmyDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmyDescription::InternalSwap(ArmyDescription* other) {
  using std::swap;
  CastToBase(&units_)->InternalSwap(CastToBase(&other->units_));
  swap(cost_, other->cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArmyDescription::GetMetadata() const {
  protobuf_Army_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Army_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unit::InitAsDefaultInstance() {
  ::_Unit_default_instance_._instance.get_mutable()->warhammer40k_unit_ = const_cast< ::Warhammer40kUnit*>(
      ::Warhammer40kUnit::internal_default_instance());
  ::_Unit_default_instance_._instance.get_mutable()->warhammer40k_transport_ = const_cast< ::Warhamer40kTransport*>(
      ::Warhamer40kTransport::internal_default_instance());
}
void Unit::clear_warhammer40k_unit() {
  if (GetArenaNoVirtual() == NULL && warhammer40k_unit_ != NULL) {
    delete warhammer40k_unit_;
  }
  warhammer40k_unit_ = NULL;
}
void Unit::clear_warhammer40k_transport() {
  if (GetArenaNoVirtual() == NULL && warhammer40k_transport_ != NULL) {
    delete warhammer40k_transport_;
  }
  warhammer40k_transport_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unit::kNameFieldNumber;
const int Unit::kCostFieldNumber;
const int Unit::kNumFiguresFieldNumber;
const int Unit::kDescriptionFieldNumber;
const int Unit::kWarhammer40KUnitFieldNumber;
const int Unit::kWarhammer40KTransportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Army_2eproto::scc_info_Unit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Unit)
}
Unit::Unit(const Unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_warhammer40k_unit()) {
    warhammer40k_unit_ = new ::Warhammer40kUnit(*from.warhammer40k_unit_);
  } else {
    warhammer40k_unit_ = NULL;
  }
  if (from.has_warhammer40k_transport()) {
    warhammer40k_transport_ = new ::Warhamer40kTransport(*from.warhammer40k_transport_);
  } else {
    warhammer40k_transport_ = NULL;
  }
  ::memcpy(&cost_, &from.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_figures_) -
    reinterpret_cast<char*>(&cost_)) + sizeof(num_figures_));
  // @@protoc_insertion_point(copy_constructor:Unit)
}

void Unit::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&warhammer40k_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_figures_) -
      reinterpret_cast<char*>(&warhammer40k_unit_)) + sizeof(num_figures_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete warhammer40k_unit_;
  if (this != internal_default_instance()) delete warhammer40k_transport_;
}

void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  ::protobuf_Army_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Army_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unit& Unit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Army_2eproto::scc_info_Unit.base);
  return *internal_default_instance();
}


void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && warhammer40k_unit_ != NULL) {
    delete warhammer40k_unit_;
  }
  warhammer40k_unit_ = NULL;
  if (GetArenaNoVirtual() == NULL && warhammer40k_transport_ != NULL) {
    delete warhammer40k_transport_;
  }
  warhammer40k_transport_ = NULL;
  ::memset(&cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_figures_) -
      reinterpret_cast<char*>(&cost_)) + sizeof(num_figures_));
  _internal_metadata_.Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Unit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Unit.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_figures = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_figures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Unit.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Warhammer40kUnit warhammer40k_unit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_warhammer40k_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Warhamer40kTransport warhammer40k_transport = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_warhammer40k_transport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Unit)
  return false;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Unit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 cost = 2;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  // uint32 num_figures = 3;
  if (this->num_figures() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_figures(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Unit.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // .Warhammer40kUnit warhammer40k_unit = 5;
  if (this->has_warhammer40k_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_warhammer40k_unit(), output);
  }

  // .Warhamer40kTransport warhammer40k_transport = 6;
  if (this->has_warhammer40k_transport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_warhammer40k_transport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Unit)
}

::google::protobuf::uint8* Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Unit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 cost = 2;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost(), target);
  }

  // uint32 num_figures = 3;
  if (this->num_figures() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_figures(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Unit.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // .Warhammer40kUnit warhammer40k_unit = 5;
  if (this->has_warhammer40k_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_warhammer40k_unit(), deterministic, target);
  }

  // .Warhamer40kTransport warhammer40k_transport = 6;
  if (this->has_warhammer40k_transport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_warhammer40k_transport(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Unit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .Warhammer40kUnit warhammer40k_unit = 5;
  if (this->has_warhammer40k_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *warhammer40k_unit_);
  }

  // .Warhamer40kTransport warhammer40k_transport = 6;
  if (this->has_warhammer40k_transport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *warhammer40k_transport_);
  }

  // uint32 cost = 2;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost());
  }

  // uint32 num_figures = 3;
  if (this->num_figures() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_figures());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_warhammer40k_unit()) {
    mutable_warhammer40k_unit()->::Warhammer40kUnit::MergeFrom(from.warhammer40k_unit());
  }
  if (from.has_warhammer40k_transport()) {
    mutable_warhammer40k_transport()->::Warhamer40kTransport::MergeFrom(from.warhammer40k_transport());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.num_figures() != 0) {
    set_num_figures(from.num_figures());
  }
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(warhammer40k_unit_, other->warhammer40k_unit_);
  swap(warhammer40k_transport_, other->warhammer40k_transport_);
  swap(cost_, other->cost_);
  swap(num_figures_, other->num_figures_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_Army_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Army_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ArmyDescription* Arena::CreateMaybeMessage< ::ArmyDescription >(Arena* arena) {
  return Arena::CreateInternal< ::ArmyDescription >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Unit* Arena::CreateMaybeMessage< ::Unit >(Arena* arena) {
  return Arena::CreateInternal< ::Unit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
