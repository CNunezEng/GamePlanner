// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Army.proto

#ifndef PROTOBUF_INCLUDED_Army_2eproto
#define PROTOBUF_INCLUDED_Army_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "warhammer40kUnit.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Army_2eproto 

namespace protobuf_Army_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Army_2eproto
class ArmyDescription;
class ArmyDescriptionDefaultTypeInternal;
extern ArmyDescriptionDefaultTypeInternal _ArmyDescription_default_instance_;
class Unit;
class UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
namespace google {
namespace protobuf {
template<> ::ArmyDescription* Arena::CreateMaybeMessage<::ArmyDescription>(Arena*);
template<> ::Unit* Arena::CreateMaybeMessage<::Unit>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ArmyDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyDescription) */ {
 public:
  ArmyDescription();
  virtual ~ArmyDescription();

  ArmyDescription(const ArmyDescription& from);

  inline ArmyDescription& operator=(const ArmyDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArmyDescription(ArmyDescription&& from) noexcept
    : ArmyDescription() {
    *this = ::std::move(from);
  }

  inline ArmyDescription& operator=(ArmyDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArmyDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArmyDescription* internal_default_instance() {
    return reinterpret_cast<const ArmyDescription*>(
               &_ArmyDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ArmyDescription* other);
  friend void swap(ArmyDescription& a, ArmyDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArmyDescription* New() const final {
    return CreateMaybeMessage<ArmyDescription>(NULL);
  }

  ArmyDescription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArmyDescription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArmyDescription& from);
  void MergeFrom(const ArmyDescription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmyDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Unit units = 2;
  int units_size() const;
  void clear_units();
  static const int kUnitsFieldNumber = 2;
  ::Unit* mutable_units(int index);
  ::google::protobuf::RepeatedPtrField< ::Unit >*
      mutable_units();
  const ::Unit& units(int index) const;
  ::Unit* add_units();
  const ::google::protobuf::RepeatedPtrField< ::Unit >&
      units() const;

  // uint32 cost = 1;
  void clear_cost();
  static const int kCostFieldNumber = 1;
  ::google::protobuf::uint32 cost() const;
  void set_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ArmyDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Unit > units_;
  ::google::protobuf::uint32 cost_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Army_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Unit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Unit) */ {
 public:
  Unit();
  virtual ~Unit();

  Unit(const Unit& from);

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(Unit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Unit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Unit* other);
  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unit* New() const final {
    return CreateMaybeMessage<Unit>(NULL);
  }

  Unit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unit& from);
  void MergeFrom(const Unit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .Warhammer40kUnit warhammer40k_unit = 5;
  bool has_warhammer40k_unit() const;
  void clear_warhammer40k_unit();
  static const int kWarhammer40KUnitFieldNumber = 5;
  private:
  const ::Warhammer40kUnit& _internal_warhammer40k_unit() const;
  public:
  const ::Warhammer40kUnit& warhammer40k_unit() const;
  ::Warhammer40kUnit* release_warhammer40k_unit();
  ::Warhammer40kUnit* mutable_warhammer40k_unit();
  void set_allocated_warhammer40k_unit(::Warhammer40kUnit* warhammer40k_unit);

  // .Warhamer40kTransport warhammer40k_transport = 6;
  bool has_warhammer40k_transport() const;
  void clear_warhammer40k_transport();
  static const int kWarhammer40KTransportFieldNumber = 6;
  private:
  const ::Warhamer40kTransport& _internal_warhammer40k_transport() const;
  public:
  const ::Warhamer40kTransport& warhammer40k_transport() const;
  ::Warhamer40kTransport* release_warhammer40k_transport();
  ::Warhamer40kTransport* mutable_warhammer40k_transport();
  void set_allocated_warhammer40k_transport(::Warhamer40kTransport* warhammer40k_transport);

  // uint32 cost = 2;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  ::google::protobuf::uint32 cost() const;
  void set_cost(::google::protobuf::uint32 value);

  // uint32 num_figures = 3;
  void clear_num_figures();
  static const int kNumFiguresFieldNumber = 3;
  ::google::protobuf::uint32 num_figures() const;
  void set_num_figures(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Unit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::Warhammer40kUnit* warhammer40k_unit_;
  ::Warhamer40kTransport* warhammer40k_transport_;
  ::google::protobuf::uint32 cost_;
  ::google::protobuf::uint32 num_figures_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Army_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArmyDescription

// uint32 cost = 1;
inline void ArmyDescription::clear_cost() {
  cost_ = 0u;
}
inline ::google::protobuf::uint32 ArmyDescription::cost() const {
  // @@protoc_insertion_point(field_get:ArmyDescription.cost)
  return cost_;
}
inline void ArmyDescription::set_cost(::google::protobuf::uint32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:ArmyDescription.cost)
}

// repeated .Unit units = 2;
inline int ArmyDescription::units_size() const {
  return units_.size();
}
inline void ArmyDescription::clear_units() {
  units_.Clear();
}
inline ::Unit* ArmyDescription::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:ArmyDescription.units)
  return units_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Unit >*
ArmyDescription::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:ArmyDescription.units)
  return &units_;
}
inline const ::Unit& ArmyDescription::units(int index) const {
  // @@protoc_insertion_point(field_get:ArmyDescription.units)
  return units_.Get(index);
}
inline ::Unit* ArmyDescription::add_units() {
  // @@protoc_insertion_point(field_add:ArmyDescription.units)
  return units_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Unit >&
ArmyDescription::units() const {
  // @@protoc_insertion_point(field_list:ArmyDescription.units)
  return units_;
}

// -------------------------------------------------------------------

// Unit

// string name = 1;
inline void Unit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Unit::name() const {
  // @@protoc_insertion_point(field_get:Unit.name)
  return name_.GetNoArena();
}
inline void Unit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Unit.name)
}
#if LANG_CXX11
inline void Unit::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Unit.name)
}
#endif
inline void Unit::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Unit.name)
}
inline void Unit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Unit.name)
}
inline ::std::string* Unit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Unit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Unit::release_name() {
  // @@protoc_insertion_point(field_release:Unit.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Unit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Unit.name)
}

// uint32 cost = 2;
inline void Unit::clear_cost() {
  cost_ = 0u;
}
inline ::google::protobuf::uint32 Unit::cost() const {
  // @@protoc_insertion_point(field_get:Unit.cost)
  return cost_;
}
inline void Unit::set_cost(::google::protobuf::uint32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:Unit.cost)
}

// uint32 num_figures = 3;
inline void Unit::clear_num_figures() {
  num_figures_ = 0u;
}
inline ::google::protobuf::uint32 Unit::num_figures() const {
  // @@protoc_insertion_point(field_get:Unit.num_figures)
  return num_figures_;
}
inline void Unit::set_num_figures(::google::protobuf::uint32 value) {
  
  num_figures_ = value;
  // @@protoc_insertion_point(field_set:Unit.num_figures)
}

// string description = 4;
inline void Unit::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Unit::description() const {
  // @@protoc_insertion_point(field_get:Unit.description)
  return description_.GetNoArena();
}
inline void Unit::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Unit.description)
}
#if LANG_CXX11
inline void Unit::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Unit.description)
}
#endif
inline void Unit::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Unit.description)
}
inline void Unit::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Unit.description)
}
inline ::std::string* Unit::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Unit.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Unit::release_description() {
  // @@protoc_insertion_point(field_release:Unit.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Unit::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Unit.description)
}

// .Warhammer40kUnit warhammer40k_unit = 5;
inline bool Unit::has_warhammer40k_unit() const {
  return this != internal_default_instance() && warhammer40k_unit_ != NULL;
}
inline const ::Warhammer40kUnit& Unit::_internal_warhammer40k_unit() const {
  return *warhammer40k_unit_;
}
inline const ::Warhammer40kUnit& Unit::warhammer40k_unit() const {
  const ::Warhammer40kUnit* p = warhammer40k_unit_;
  // @@protoc_insertion_point(field_get:Unit.warhammer40k_unit)
  return p != NULL ? *p : *reinterpret_cast<const ::Warhammer40kUnit*>(
      &::_Warhammer40kUnit_default_instance_);
}
inline ::Warhammer40kUnit* Unit::release_warhammer40k_unit() {
  // @@protoc_insertion_point(field_release:Unit.warhammer40k_unit)
  
  ::Warhammer40kUnit* temp = warhammer40k_unit_;
  warhammer40k_unit_ = NULL;
  return temp;
}
inline ::Warhammer40kUnit* Unit::mutable_warhammer40k_unit() {
  
  if (warhammer40k_unit_ == NULL) {
    auto* p = CreateMaybeMessage<::Warhammer40kUnit>(GetArenaNoVirtual());
    warhammer40k_unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Unit.warhammer40k_unit)
  return warhammer40k_unit_;
}
inline void Unit::set_allocated_warhammer40k_unit(::Warhammer40kUnit* warhammer40k_unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(warhammer40k_unit_);
  }
  if (warhammer40k_unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warhammer40k_unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warhammer40k_unit, submessage_arena);
    }
    
  } else {
    
  }
  warhammer40k_unit_ = warhammer40k_unit;
  // @@protoc_insertion_point(field_set_allocated:Unit.warhammer40k_unit)
}

// .Warhamer40kTransport warhammer40k_transport = 6;
inline bool Unit::has_warhammer40k_transport() const {
  return this != internal_default_instance() && warhammer40k_transport_ != NULL;
}
inline const ::Warhamer40kTransport& Unit::_internal_warhammer40k_transport() const {
  return *warhammer40k_transport_;
}
inline const ::Warhamer40kTransport& Unit::warhammer40k_transport() const {
  const ::Warhamer40kTransport* p = warhammer40k_transport_;
  // @@protoc_insertion_point(field_get:Unit.warhammer40k_transport)
  return p != NULL ? *p : *reinterpret_cast<const ::Warhamer40kTransport*>(
      &::_Warhamer40kTransport_default_instance_);
}
inline ::Warhamer40kTransport* Unit::release_warhammer40k_transport() {
  // @@protoc_insertion_point(field_release:Unit.warhammer40k_transport)
  
  ::Warhamer40kTransport* temp = warhammer40k_transport_;
  warhammer40k_transport_ = NULL;
  return temp;
}
inline ::Warhamer40kTransport* Unit::mutable_warhammer40k_transport() {
  
  if (warhammer40k_transport_ == NULL) {
    auto* p = CreateMaybeMessage<::Warhamer40kTransport>(GetArenaNoVirtual());
    warhammer40k_transport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Unit.warhammer40k_transport)
  return warhammer40k_transport_;
}
inline void Unit::set_allocated_warhammer40k_transport(::Warhamer40kTransport* warhammer40k_transport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(warhammer40k_transport_);
  }
  if (warhammer40k_transport) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warhammer40k_transport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warhammer40k_transport, submessage_arena);
    }
    
  } else {
    
  }
  warhammer40k_transport_ = warhammer40k_transport;
  // @@protoc_insertion_point(field_set_allocated:Unit.warhammer40k_transport)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Army_2eproto
